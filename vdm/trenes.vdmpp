class Tren
instance variables
  id: nat1;
  tipo: seq of char; -- carga | transporte
  distanciaSeguridad: real;
inv
  distanciaSeguridad >= 0.0;

operations
  public Tren: nat1 * seq of char * real ==> Tren
  Tren(i, t, d) == (
    id := i;
    tipo := t;
    distanciaSeguridad := d
  )
  pre d >= 0.0
  post id = i and tipo = t and distanciaSeguridad = d;

  public desacelerar: () ==> ()
  desacelerar() == skip;

  public acelerar: () ==> ()
  acelerar() == skip;

  public frenar: () ==> ()
  frenar() == skip;
end Tren

class Alerta
instance variables
  id: nat1;
  tipo: seq of char; -- distancia corta | via con obstruccion
  mensaje: seq of char;
  fechaHora: seq of char; -- timestamp como cadena

operations
  public Alerta: nat1 * seq of char * seq of char * seq of char ==> Alerta
  Alerta(i, tp, msg, fh) == (
    id := i;
    tipo := tp;
    mensaje := msg;
    fechaHora := fh
  );
end Alerta

class Sensor
instance variables
  id: nat1;
  activo: bool;
  tren: [Tren];
  alertas: set of Alerta := {};

operations
  public Sensor: nat1 * bool * [Tren] ==> Sensor
  Sensor(i, a, t) == (
    id := i;
    activo := a;
    tren := t;
    alertas := {}
  );

  public SetActivo: bool ==> ()
  SetActivo(a) == activo := a;

  public enviarAlerta: Alerta ==> ()
  enviarAlerta(al) == alertas := alertas union {al};
end Sensor

class SensorEntreTrenes is subclass of Sensor
instance variables
  distanciaConTrenDelantero: real;
  existeTren: bool;
inv
  distanciaConTrenDelantero >= 0.0;

operations
  public SensorEntreTrenes: nat1 * bool * [Tren] * real * bool ==> SensorEntreTrenes
  SensorEntreTrenes(i, a, t, d, e) == (
    Sensor(i, a, t);
    distanciaConTrenDelantero := d;
    existeTren := e
  );

  public SetDistanciaConTrenDelantero: real ==> ()
  SetDistanciaConTrenDelantero(d) == distanciaConTrenDelantero := d;

  public SetExisteTren: bool ==> ()
  SetExisteTren(e) == existeTren := e;
end SensorEntreTrenes

class SensorDeProximidad is subclass of Sensor
instance variables
  deteccion: bool;
  queSeDetecta: seq of char;

operations
  public SensorDeProximidad: nat1 * bool * [Tren] * bool * seq of char ==> SensorDeProximidad
  SensorDeProximidad(i, a, t, det, qsd) == (
    Sensor(i, a, t);
    deteccion := det;
    queSeDetecta := qsd
  );

  public SetDeteccion: bool ==> ()
  SetDeteccion(det) == deteccion := det;
end SensorDeProximidad

class SistemaControl
instance variables
  nombre: seq of char;
  trenes: set of Tren := {};
  sensores: set of Sensor := {};

operations
  public SistemaControl: seq of char ==> SistemaControl
  SistemaControl(n) == (
    nombre := n;
    trenes := {};
    sensores := {}
  );

  public agregarTren: Tren ==> ()
  agregarTren(t) == trenes := trenes union {t};

  public agregarSensor: Sensor ==> ()
  agregarSensor(s) == sensores := sensores union {s};

  public emitirOrdenes: seq of char ==> ()
  emitirOrdenes(mensaje) == skip;

  public CalibrarVelocidad: Tren ==> ()
  CalibrarVelocidad(t) == skip;

  public RecibirAlertas: () ==> set of Alerta
  RecibirAlertas() ==
    return { al | s in set sensores, al in set s.alertas };
end SistemaControl
