@startuml trafico de trenes

class Tren {
    -idTrain: nat1
    -typeTrain: seq of char <<carga|transporte>>
    -lengthTrain: real
    -distanceSafetyTrain: real
    +Tren(idTrain: nat1, typeTrain: seq of char, lengthTrain: real, distanceSafetyTrain: real)
    +desacelerar(): ()
    +acelerar(): ()
    +frenar(): ()
}

class Sensor {
    #idSensor: nat1
    #assetSensor: bool
    +Sensor(idSensor: nat1, assetSensor: bool)
    +SetActivo(asset: bool): ()
    +enviarAlerta(alerta: Alerta): ()
}

class SensorEntreTrenes{
    -distanceWithFrontTrain: real
    -thatIsDetected : bool
    +SensorEntreTrenes(id: nat1, activo: bool, distanceWithFrontTrain: real, thatIsDetected : bool)
    +SetdistanciaConTrenDelantero(distance: real): ()
    +SetexisteTren(existeTren : bool): ()
}

class SensorDeProximidad {
    -detection: bool
    -queSeDetecta: seq of char
    +SensorDeProximidad(id: nat1, activo: bool, detection: bool, queSeDetecta: seq of char)
    +deteccion(deteccion: bool): ()
}

class Alerta {
    -idAlert: nat1
    -typeAlert: seq of char <<distancia corta|via con obstruccion>>
    -messageAlert: seq of char
    -dateAlert: nat1 * nat1 * nat1
    -hourAlert: nat * nat * nat
    +Alerta(typeAlert: nat1, messageAlert: seq of char, messageAlert: seq of char, dateAlert: nat1 * nat1 * nat1, hourAlert: nat * nat * nat)
}

class SistemaControl {
    -name: seq of char
    +SistemaControl(name: seq of char)
    +emitirOrdenes(mensaje: seq of char): ()
    +CalibrarVelocidad(TrenAtras: Tren): ()
    +RecibirAlertas(): ()
}

Sensor <|-- SensorEntreTrenes
Sensor <|-- SensorDeProximidad

SistemaControl "1" o-- "1..*" Tren : gestiona
Sensor "1" -- "0..*" Alerta : genera
Sensor "2" -- "1" Tren
@enduml